export const VaultTemplateABI = [
  "event Locked(address delegate, address token, uint256 amount)",
  "event RageQuit(address delegate, address token, bool notified, string reason)",
  "event Unlocked(address delegate, address token, uint256 amount)",
  "function LOCK_TYPEHASH() view returns (bytes32)",
  "function RAGEQUIT_GAS() view returns (uint256)",
  "function UNLOCK_TYPEHASH() view returns (bytes32)",
  "function calculateLockID(address delegate, address token) pure returns (bytes32 lockID)",
  "function checkBalances() view returns (bool validity)",
  "function getBalanceDelegated(address token, address delegate) view returns (uint256 balance)",
  "function getBalanceLocked(address token) view returns (uint256 balance)",
  "function getLockAt(uint256 index) view returns (tuple(address delegate, address token, uint256 balance) lockData)",
  "function getLockSetCount() view returns (uint256 count)",
  "function getNonce() view returns (uint256 nonce)",
  "function getPermissionHash(bytes32 eip712TypeHash, address delegate, address token, uint256 amount, uint256 nonce) view returns (bytes32 permissionHash)",
  "function initialize()",
  "function initializeLock()",
  "function isValidSignature(bytes32 permissionHash, bytes signature) view returns (bytes4)",
  "function lock(address token, uint256 amount, bytes permission)",
  "function nft() view returns (address nftAddress)",
  "function owner() view returns (address ownerAddress)",
  "function rageQuit(address delegate, address token) returns (bool notified, string error)",
  "function transferERC20(address token, address to, uint256 amount)",
  "function transferETH(address to, uint256 amount) payable",
  "function unlock(address token, uint256 amount, bytes permission)"
]